apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

group 'com.spectrumcustomizer.integration'
version '1.0.4'

def properties = new Properties()
properties.load(new FileInputStream("local.properties"))

def pomConfig = {
    licenses {
        license {
            name "MIT"
            url "https://www.tldrlegal.com/l/mit"
            distribution "repo"
        }
    }
    developers {
        developer {
            organization "Spectrum"
            organizationUrl "https://www.spectrumcustomizer.com/"
            name "Tom Falkner"
            email "tom.falkner@pollinate.com"
        }
    }

    scm {
        url 'https://github.com/spectrum-customizer/spectrum-android-native-wrapper'
    }
}

publishing {
    publications {
        Production(MavenPublication) {
            version this.version

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    publications = ['Production']
    configurations = ['archives']
    override = true
    dryRun = false
    publish = false
    pkg {
        repo = 'SpectrumCustomizer'
        name = 'com.spectrumcustomizer.integration'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/spectrum-customizer/spectrum-android-native-wrapper.git'
        description = 'A library for interacting with Spectrum Customizer content.'
        publicDownloadNumbers = false
        version {
            name = this.version
            desc = "Version ${this.version}"
            released = new Date()
            vcsTag = this.version
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {

    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    // options.encoding = 'UTF-8'
}

artifacts {
    archives javadocJar
    archives sourcesJar
}